{
  "name": "Olov",
  "tagline": "Olov is a micro templating engine for PHP. ",
  "body": "## Olov is a micro templating engine for PHP ##\r\n\r\nOlov uses native PHP templates but with a single elegant function `o()` \r\nto help you do amazing things with very simple syntax.\r\n\r\n#### 1. Defining blocks... ####\r\n\r\nBlocks are defined like this: ` <?php o('+blockname') ?> ` with a matching close \r\nlike this ` <?php o('-blockname') ?> `. \r\n\r\n*Example of block definitions:*\r\n\r\n```php\r\n<?php /* ============  ./base.html.php ===============  */ ?>\r\n<!DOCTYPE html>\r\n<html>\r\n<head><title>Welcome to Olov!</title></head>\r\n<body>\r\n<div class=\"header\">\r\n<?php o('+header'); ?>\r\n<h3>Default Header Content</h3>\r\n<?php o('-header'); ?>\r\n</div>\r\n\r\n<div class=\"content\">\r\n<?php o('+content'); ?>\r\n<p>\r\nThe default content goes here and can be replaced in a child template that \r\nextends this one.\r\n</p>\r\n<?php o('-content'); ?>\r\n</div>\r\n\r\n<div class=\"footer\">\r\n<?php o('+footer'); ?>\r\n<hr />\r\n<small>&copy; 2016 Default Footer Content</small>\r\n<?php o('-footer'); ?>\r\n</div>\r\n\r\n</body>\r\n</html>\r\n```\r\n\r\n------------------------------------------------------------------\r\n\r\n#### 2. Extending a base template... ####\r\n\r\nTo extend another template, at the very top, do: ` <?php o('::base.html.php') ?> ` \r\n*See example of block definitions below.*\r\n\r\n```php\r\n<?php /* ==============  ./hello.html.php  ============ */ ?>\r\n\r\n<?php o('::base.html.php');  ?>\r\n\r\n<?php o('+header'); ?>\r\n<h2>Pimp My Header</h2>\r\n<?php o('-header'); ?>\r\n\r\n<?php o('+content'); ?>\r\n<p>\r\nTo override the default +content block, create one in the child template \r\nand put whatever youu like in the new block!\r\n</p>\r\n<?php o('-content'); ?>\r\n\r\n<?php o('+footer'); ?>\r\n<hr />\r\n<small>&copy; 2020 <i>Hmm, upgrades.</i></small>\r\n<?php o('-footer'); ?>\r\n\r\n```\r\n\r\n------------------------------------------------------------------\r\n\r\n#### 3. Template partials... ####\r\n\r\nTo include a template partial, do: ` <?php o(':partial.html.php') ?> ` \r\n*See example of partial include below (note the difference between the syntax for ::exending and :including)*\r\n\r\n```php\r\n<?php /* ==============  ./hello.html.php  ============ */ ?>\r\n\r\n<?php o('::base.html.php');  ?>\r\n\r\n<?php o('+header'); ?>\r\n<?php o(':header.html.php'); ?>\r\n<?php o('-header'); ?>\r\n\r\n<?php o('+content'); ?>\r\n<p>Content body here.</p>\r\n<?php o('-content'); ?>\r\n\r\n<?php o('+footer'); ?>\r\n<?php o(':footer.html.php'); ?>\r\n<?php o('-footer'); ?>\r\n\r\n```\r\n\r\n------------------------------------------------------------------\r\n\r\n#### 4. Template variables... ####\r\n\r\nYou can define your template variables in an associative ` array[] ` like this:\r\n\r\n```php\r\n<?php \r\n\r\n/* ============== ./index.php =================== */ \r\n// Include `Olov\\Engine` class (or use composer autoloader)\r\nrequire '../path/to/olov/src/Olov/Engine.php';\r\n\r\n// Declare vars...\r\n$vars = [\r\n    'page' => [\r\n        'title' => 'Olov Template Engine for PHP', \r\n        'body'  =>  'Values are automatically <b>escaped</b> when used the template.', \r\n        'tags'  => [\r\n            'php', 'template engine', 'olov'\r\n        ]\r\n    ];\r\n```\r\n\r\n**Then create Olov engine instance and render:**\r\n```php\r\n// Our templates folder...\r\n$templates_path = \"./my/templates/folder/\":\r\n\r\n// New instance of `Olov\\Engine`\r\n$Olov = new Olov\\Engine($templates_path);\r\n\r\n// Render...\r\n$Olov->render('hello.html.php', $vars);\r\n\r\n?>\r\n\r\n\r\n```\r\n\r\n**Our template: ./hello.html.php**\r\n\r\n```php\r\n<?php /* ==============  ./hello.html.php  ============ */ ?>\r\n\r\n<?php o('::base.html.php');  ?>\r\n\r\n<?php o('+header'); ?>\r\n<h2><?= o('page.title') ?></h2>\r\n<?php o('-header'); ?>\r\n\r\n<?php o('+content'); ?>\r\n\r\n<p>\r\n<?= o('page.body') ?>\r\n</p>\r\n\r\n<p><small>Character count: <?= o('page.body|length') ?></small></p>\r\n\r\n<ul>\r\n<?php o('page.tags|each:i,li'); ?>\r\n</ul>\r\n\r\n<?php o('-content'); ?>\r\n\r\n<?php o('+footer'); ?>\r\n<hr />\r\n<small>&copy; 2020 <i>Hmm, upgrades.</i></small>\r\n<?php o('-footer'); ?>\r\n\r\n```\r\n\r\n------------------------------------------------------------------\r\n\r\n#### 5. Loops ####\r\n\r\nYou can automatically print array values by doing: \r\n```php \r\n<ul>\r\n<?php o('page.tags|each'); ?>\r\n</ul>\r\n```\r\n\r\nThis will output:\r\n\r\n* php\r\n* template engine\r\n* olov\r\n\r\n\r\nOlov wraps your array values with the ` <li> ` by default and auto escapes the text values. \r\nOlov can also wrap your loop items in multiple concentric layers of tags. For eaxample:\r\n```php\r\n<?php o('page.tags|each:b,a,li'); ?>\r\n```\r\nOutputs:\r\n```html\r\n<li><a><b>Text Value</b></a></li>\r\n```\r\n\r\n\r\nTo set tag properties and attributes, define your list in your ` $vars ` array like this:\r\n```php\r\n$vars = [\r\n    // ....\r\n    'users' => [\r\n        ['Jamie Foxx', 'a:href'=>'https://en.wikipedia.org/wiki/Jamie_Foxx', 'li:class'=>'name'],   \r\n        ['Marlon Brando', 'a:href'=>'https://en.wikipedia.org/wiki/Marlon_Brando', 'li:class'=>'name'],   \r\n        ['Thandie Newton', 'a:href'=>'https://en.wikipedia.org/wiki/Thandie_Newton', 'li:class'=>'name']\r\n    ]\r\n];\r\n```\r\nThen...\r\n```php\r\n<ul class=\"hollywood-actors\">\r\n<?php o('page.tags|each:a,li'); ?>\r\n</ul>\r\n```\r\nThrow in the blender and ...\r\n```html\r\n<ul class=\"hollywood-actors\">\r\n<li class=\"name\"><a href=\"https://en.wikipedia.org/wiki/Jamie_Foxx\">Jamie Foxx</a></li>\r\n<li class=\"name\"><a href=\"https://en.wikipedia.org/wiki/Marlon_Brando\">Marlon Brando</a></li>\r\n<li class=\"name\"><a href=\"https://en.wikipedia.org/wiki/Thandie_Newton\">Thandie Newton</a></li>\r\n</ul>\r\n```   \r\n* [Jamie Foxx](https://en.wikipedia.org/wiki/Jamie_Foxx)\r\n* [Marlon Brando](https://en.wikipedia.org/wiki/Marlon_Brando)\r\n* [Jamie Foxx](https://en.wikipedia.org/wiki/Thandie_Newton)\r\n\r\n-----------------------------------------------------------------------\r\n\r\n#### 6. Installation ####\r\n\r\nYou can [require](https://getcomposer.org/doc/03-cli.md) with Composer:\r\n```shell\r\n$ composer require \"olov/olov:~1.0\"\r\n```\r\n \r\nOr clone this repo with:\r\n```shell\r\n$ git clone https://github.com/olovphp/Olov.git\r\n```\r\n\r\nOr download the zip folder.\r\n\r\n\r\n\r\n--------------------------------------------------------------------------\r\n\r\n\r\nThis is a quickstart guide not a real documentation (that is on the way.) In the meantime \r\nplease clone the repo and run ` examples/index.php ` to see a live example. I hope you \r\nfind this useful in your projects and bug reports are most welcome! \r\n\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}